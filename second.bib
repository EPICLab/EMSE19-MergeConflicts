
@inproceedings{servant_casi:_2010,
  address = {New York, NY, USA},
  series = {CHASE '10},
  title = {{{CASI}}: {{Preventing Indirect Conflicts Through}} a {{Live Visualization}}},
  isbn = {978-1-60558-966-4},
  doi = {10.1145/1833310.1833317},
  booktitle = {Proceedings of the 2010 {{ICSE Workshop}} on {{Cooperative}} and {{Human Aspects}} of {{Software Engineering}}},
  publisher = {{ACM}},
  author = {Servant, Francisco and Jones, James A. and {van der Hoek}, Andr{\'e}},
  year = {2010},
  keywords = {conflicts,parallel work,software configuration management,software visualization,workspace awareness},
  pages = {39--46},
  file = {/Users/caius/Zotero/storage/QUUDE98A/Servant et al_2010_CASI.pdf}
}

@inproceedings{westfechtel_structure-oriented_1991,
  address = {New York, NY, USA},
  series = {SCM '91},
  title = {Structure-Oriented {{Merging}} of {{Revisions}} of {{Software Documents}}},
  isbn = {0-89791-429-5},
  doi = {10.1145/111062.111071},
  booktitle = {Proceedings of the 3rd {{International Workshop}} on {{Software Configuration Management}}},
  publisher = {{ACM}},
  author = {Westfechtel, Bernhard},
  year = {1991},
  pages = {68--79},
  file = {/Users/caius/Zotero/storage/TMVIFBS4/Westfechtel_1991_Structure-oriented Merging of Revisions of Software Documents.pdf}
}

@inproceedings{sarma_palantir:_2003,
  title = {Palantir: {{Raising Awareness}} among {{Configuration Management Workspaces}}},
  shorttitle = {Palantir},
  abstract = {Current configuration management systems promote workspaces that isolate developers from each other. This isolation is both good and bad. It is good, because developers make their changes without any interference from changes made concurrently by other developers. It is bad, because not knowing which artifacts are changing in parallel regularly leads to problems when changes are promoted from workspaces into a central configuration management repository. Overcoming the bad isolation, while retaining the good isolation, is a matter of raising awareness among developers, an issue traditionally ignored by the discipline of configuration management. To fill this void, we have developed Palantr, a novel workspace awareness tool that complements existing configuration management systems by providing developers with insight into other workspaces. In particular, the tool informs a developer of which other developers change which other artifacts, calculates a simple measure of severity of those changes, and graphically displays the information in a configurable and generally non-obtrusive manner. To illustrate the use of Palantir, we demonstrate how it integrates with two representative configuration management systems.},
  author = {Sarma, Anita and Noroozi, Zahra and Hoek, Andr{\'e} Van Der},
  year = {2003},
  pages = {444--454},
  file = {/Users/caius/Zotero/storage/IBWVRMGD/Sarma et al. - 2003 - Palantir Raising Awareness among Configuration Ma.pdf}
}

@article{binkley_program_1995,
  title = {Program {{Integration}} for {{Languages}} with {{Procedure Calls}}},
  volume = {4},
  issn = {1049-331X},
  doi = {10.1145/201055.201056},
  number = {1},
  journal = {ACM Trans. Softw. Eng. Methodol.},
  author = {Binkley, David and Horwitz, Susan and Reps, Thomas},
  month = jan,
  year = {1995},
  keywords = {control dependence,data dependence,data-flow analysis,flow-insensitive summary information,program dependence graph,program slicing,semantics-based program integration},
  pages = {3--35},
  file = {/Users/caius/Zotero/storage/6PEH37C2/Binkley et al_1995_Program Integration for Languages with Procedure Calls.pdf}
}

@inproceedings{kasi_cassandra:_2013,
  address = {Piscataway, NJ, USA},
  series = {ICSE '13},
  title = {Cassandra: {{Proactive Conflict Minimization Through Optimized Task Scheduling}}},
  isbn = {978-1-4673-3076-3},
  shorttitle = {Cassandra},
  abstract = {Software conflicts arising because of conflicting changes are a regular occurrence and delay projects. The main precept of workspace awareness tools has been to identify potential conflicts early, while changes are still small and easier to resolve. However, in this approach conflicts still occur and require developer time and effort to resolve. We present a novel conflict minimization technique that proactively identifies potential conflicts, encodes them as constraints, and solves the constraint space to recommend a set of conflict-minimal development paths for the team. Here we present a study of four open source projects to characterize the distribution of conflicts and their resolution efforts. We then explain our conflict minimization technique and the design and implementation of this technique in our prototype, Cassandra. We show that Cassandra would have successfully avoided a majority of conflicts in the four open source test subjects. We demonstrate the efficiency of our approach by applying the technique to a simulated set of scenarios with higher than normal incidence of conflicts.},
  booktitle = {Proceedings of the 2013 {{International Conference}} on {{Software Engineering}}},
  publisher = {{IEEE Press}},
  author = {Kasi, Bakhtiar Khan and Sarma, Anita},
  year = {2013},
  pages = {732--741},
  file = {/Users/caius/Zotero/storage/7MX7U7AC/7MX7U7AC.pdf}
}

@inproceedings{da_silva_lighthouse:_2006,
  address = {New York, NY, USA},
  series = {eclipse '06},
  title = {Lighthouse: {{Coordination Through Emerging Design}}},
  isbn = {1-59593-621-1},
  shorttitle = {Lighthouse},
  doi = {10.1145/1188835.1188838},
  abstract = {Despite the fact that software development is an inherently collaborative activity, a great deal of software development is spent with developers in isolation, working on their own parts of the system. In these situations developers are unaware of parallel changes being made by others, often resulting in conflicts. One common approach to deal with this issue is called conflict resolution, which means that changes have already been checked-in and developers must use merge tools to resolve conflicts and then retest the code to ensure its correctness. Unfortunately, this process becomes more difficult the longer the conflicts go undetected. In order to address these issues, have been proposed conflict avoidance approaches that detect conflicts as soon as they occur. In this paper, we present Lighthouse, an Eclipse plug-in that takes the conflict avoidance approach to coordinate developers. Lighthouse distinguishes itself by utilizing a concept called emerging design, an up to date design representation of the code, to alert developers of potentially conflicting implementation changes as they occur, indicating where the changes have been made and by whom.},
  booktitle = {Proceedings of the 2006 {{OOPSLA Workshop}} on {{Eclipse Technology eXchange}}},
  publisher = {{ACM}},
  author = {{da Silva}, Isabella A. and Chen, Ping H. and {Van der Westhuizen}, Christopher and Ripley, Roger M. and {van der Hoek}, Andr{\'e}},
  year = {2006},
  keywords = {abstraction,awareness,coordination,design,emerging design,reverse-engineering},
  pages = {11--15},
  file = {/Users/caius/Zotero/storage/NBWT2NUS/da Silva et al. - 2006 - Lighthouse Coordination Through Emerging Design.pdf}
}

@inproceedings{lippe_operation-based_1992,
  address = {New York, NY, USA},
  series = {SDE 5},
  title = {Operation-Based {{Merging}}},
  isbn = {0-89791-554-2},
  doi = {10.1145/142868.143753},
  abstract = {Existing approaches for merging the results of parallel development activities are limited. These approaches can be characterised as state-based: only the initial and final states are considered. This paper introduces operation-based merging, which uses the operations that were performed during development. In many cases operation-based merging has advantages over state-based merging, because it automatically respects the data-type invariants of the objects, is extensible for arbitrary object types, provides better conflict detection and allows for better support for solving these conflicts. Several algorithms for conflict detection are described and compared.},
  booktitle = {Proceedings of the {{Fifth ACM SIGSOFT Symposium}} on {{Software Development Environments}}},
  publisher = {{ACM}},
  author = {Lippe, Ernst and {van Oosterom}, Norbert},
  year = {1992},
  pages = {78--87},
  file = {/Users/caius/Zotero/storage/EGKRKVP7/Operation-based-merging.pdf}
}

@inproceedings{apel_semistructured_2011,
  address = {New York, NY, USA},
  series = {ESEC/FSE '11},
  title = {Semistructured {{Merge}}: {{Rethinking Merge}} in {{Revision Control Systems}}},
  isbn = {978-1-4503-0443-6},
  shorttitle = {Semistructured {{Merge}}},
  doi = {10.1145/2025113.2025141},
  abstract = {An ongoing problem in revision control systems is how to resolve conflicts in a merge of independently developed revisions. Unstructured revision control systems are purely text-based and solve conflicts based on textual similarity. Structured revision control systems are tailored to specific languages and use language-specific knowledge for conflict resolution. We propose semistructured revision control systems that inherit the strengths of both: the generality of unstructured systems and the expressiveness of structured systems. The idea is to provide structural information of the underlying software artifacts --- declaratively, in the form of annotated grammars. This way, a wide variety of languages can be supported and the information provided can assist in the automatic resolution of two classes of conflicts: ordering conflicts and semantic conflicts. The former can be resolved independently of the language and the latter using specific conflict handlers. We have been developing a tool that supports semistructured merge and conducted an empirical study on 24 software projects developed in Java, C\#, and Python comprising 180 merge scenarios. We found that semistructured merge reduces the number of conflicts in 60\% of the sample merge scenarios by, on average, 34\%, compared to unstructured merge. We found also that renaming is challenging in that it can increase the number of conflicts during semistructured merge, and that a combination of unstructured and semistructured merge is a pragmatic way to go.},
  booktitle = {Proceedings of the 19th {{ACM SIGSOFT Symposium}} and the 13th {{European Conference}} on {{Foundations}} of {{Software Engineering}}},
  publisher = {{ACM}},
  author = {Apel, Sven and Liebig, J{\"o}rg and Brandl, Benjamin and Lengauer, Christian and K{\"a}stner, Christian},
  year = {2011},
  keywords = {featurehouse,fstmerge,revision control,semistructured merge,software merging,Software Merging,version control},
  pages = {190--200},
  file = {/Users/caius/Zotero/storage/TSB6AKNG/Apel et al_2011_Semistructured Merge.pdf}
}

@inproceedings{guimaraes_improving_2012-1,
  address = {Zurich, Switzerland},
  series = {ICSE '12},
  title = {Improving {{Early Detection}} of {{Software Merge Conflicts}}},
  isbn = {978-1-4673-1067-3},
  booktitle = {Proceedings of the 34th {{International Conference}} on {{Software Engineering}}},
  publisher = {{IEEE Press}},
  author = {Guimar{\~a}es, M{\'a}rio L{\'u}{\i}s and Silva, Ant{\'o}nio Rito},
  year = {2012},
  keywords = {quantitative lab study},
  pages = {342-352},
  file = {/Users/caius/Zotero/storage/4ZX2HUAN/4ZX2HUAN.pdf},
  numpages = {11},
  acmid = {2337264}
}

@inproceedings{apel_structured_2012-1,
  address = {Essen, Germany},
  series = {ASE 2012},
  title = {Structured {{Merge}} with {{Auto}}-{{Tuning}}: {{Balancing Precision}} and {{Performance}}},
  isbn = {978-1-4503-1204-2},
  doi = {10.1145/2351676.2351694},
  booktitle = {Proceedings of the 27th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  publisher = {{ACM}},
  author = {Apel, Sven and Lessenich, Olaf and Lengauer, Christian},
  year = {2012},
  keywords = {JDime,Software Merging,Structured Merge,version control},
  pages = {120-129},
  file = {/Users/caius/Zotero/storage/7G2JK6D8/Apel et al_2012_Structured Merge with Auto-tuning.pdf},
  numpages = {10},
  acmid = {2351694}
}

@inproceedings{begole_work_2002,
  address = {New Orleans, Louisiana, USA},
  series = {CSCW '02},
  title = {Work {{Rhythms}}: {{Analyzing Visualizations}} of {{Awareness Histories}} of {{Distributed Groups}}},
  isbn = {1-58113-560-2},
  doi = {10.1145/587078.587125},
  booktitle = {Proceedings of the 2002 {{ACM Conference}} on {{Computer Supported Cooperative Work}}},
  publisher = {{ACM}},
  author = {Begole, James "Bo" and Tang, John C. and Smith, Randall B. and Yankelovich, Nicole},
  year = {2002},
  keywords = {awareness,CSCW,group calendaring,instant messaging (IM),presence,sociology of time,work rhythms},
  pages = {334-343},
  file = {/Users/caius/Zotero/storage/VWKNPVWQ/Begole et al_2002_Work Rhythms.pdf},
  numpages = {10},
  acmid = {587125}
}

@article{meyer_work_2017,
  title = {The {{Work Life}} of {{Developers}}: {{Activities}}, {{Switches}} and {{Perceived Productivity}}},
  volume = {PP},
  issn = {1939-3520},
  doi = {10.1109/TSE.2017.2656886},
  number = {99},
  journal = {IEEE Transactions on Software Engineering},
  author = {Meyer, Andr{\'e} N. and Barton, Laura E. and Murphy, Gail C. and Zimmermann, Thomas and Fritz, Thomas},
  month = jan,
  year = {2017},
  file = {/Users/caius/Zotero/storage/ENMEFPNK/Meyer et al_2017_The Work Life of Developers.pdf}
}

@inproceedings{biehl_fastdash:_2007,
  address = {New York, NY, USA},
  series = {CHI '07},
  title = {{{FASTDash}}: {{A Visual Dashboard}} for {{Fostering Awareness}} in {{Software Teams}}},
  isbn = {978-1-59593-593-9},
  shorttitle = {{{FASTDash}}},
  doi = {10.1145/1240624.1240823},
  abstract = {Software developers spend significant time gaining and maintaining awareness of fellow developers' activities. FASTDash is a new interactive visualization that seeks to improve team activity awareness using a spatial representation of the shared code base that highlights team members' current activities. With FASTDash, a developer can quickly determine which team members have source files checked out, which files are being viewed, and what methods and classes are currently being changed. The visualization can be annotated, allowing programmers to supplement activity information with additional status details. It provides immediate awareness of potential conflict situations, such as two programmers editing the same source file. FASTDash was developed through user-centered design, including surveys, team interviews, and in situ observation. Results from a field study show that FASTDash improved team awareness, reduced reliance on shared artifacts, and increased project-related communication. Additionally, the team that participated in our field study continues to use FASTDash.},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  publisher = {{ACM}},
  author = {Biehl, Jacob T. and Czerwinski, Mary and Smith, Greg and Robertson, George G.},
  year = {2007},
  keywords = {awareness,collaborative programming,field study,large display,visualization},
  pages = {1313-1322},
  file = {/Users/caius/Zotero/storage/R7VXJJXW/Biehl et al_2007_FASTDash.pdf}
}

@inproceedings{ragavan_pfis-v_2017,
  address = {Denver, Colorado, USA},
  series = {CHI '17},
  title = {{{PFIS}}-{{V}}: {{Modeling Foraging Behavior}} in the {{Presence}} of {{Variants}}},
  isbn = {978-1-4503-4655-9},
  doi = {10.1145/3025453.3025818},
  booktitle = {Proceedings of the 2017 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  publisher = {{ACM}},
  author = {Ragavan, Sruti Srinivasa and Pandya, Bhargav and Piorkowski, David and Hill, Charles and Kuttal, Sandeep Kaur and Sarma, Anita and Burnett, Margaret},
  year = {2017},
  keywords = {information foraging theory,variants},
  pages = {6232-6244},
  file = {/Users/caius/Zotero/storage/KR3FUPTG/Ragavan et al. - 2017 - PFIS-V Modeling Foraging Behavior in the Presence.pdf},
  numpages = {13},
  acmid = {3025818}
}

@article{danny2008tse,
 author = {Dig, Danny and Manzoor, Kashif and Johnson, Ralph E. and Nguyen, Tien N.},
 title = {Effective Software Merging in the Presence of Object-Oriented Refactorings},
 journal = {IEEE Trans. Softw. Eng.},
 issue_date = {May 2008},
 volume = {34},
 number = {3},
 month = may,
 year = {2008},
 issn = {0098-5589},
 pages = {321--335},
 numpages = {15},
 url = {http://dx.doi.org/10.1109/TSE.2008.29},
 doi = {10.1109/TSE.2008.29},
 acmid = {1383290},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
 keywords = {Configuration Management, Configuration Management, Restructuring, reverse engineering, and reengineering, Version control, Restructuring, Version control, and reengineering, reverse engineering},
} 
